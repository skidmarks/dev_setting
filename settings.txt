#자바프로그래밍 준비
> from 코드를 통해 본 빵형의 설전 JAVA

## OpenJDK와 이클립스 환경 설정
### OpenJDK 다운로드
- OpenJDK 15버전 다운로드 <https://jdk.java.net/15/>
- 압축 풀기
- 해당폴더로 이동
### 이클립스 다운로드
- 이클립스 다운로드 사이트 <http://www.eclipse.org/downloads/>
- Download Package에서 다운로드 <http://www.eclipse.org/downloads/packages/>
- Eclipse IDE for Enterprise Java Developers 다운로드
- 해당폴더로 이동

#### 개발 폴더 구조
- MyJava
  - IDE(eclipse)
  - JAVA
  - Workspace

### JDK 압축 풀기
- 해당 폴더에 압축 풀기
- jdk-15.0.1
- openjdk-15.0.1_windows-x64_bin.zip

### eclipse 압축 풀기
- 해당 폴더에 압축 풀기
- eclipse
- eclipse-jee-2020-12-R-win32-x86_64.zip


### 이클립스에 JDK 연동하기
- eclipse폴더 내 eclipse.exe 파일 실행
> 이때, 이미 java 1.8 이상의 버전이 설치되어있다면 아무런 문제 없이 실행되겠지만, java관련하여 아무것도 설치가 되어있지 않다면 다음과 같은 메시지가 출력됩니다.
> Eclipse : A java runtime environment(jre) or java development kit(jdk) must be available in order to run eclipse. no java virtual machine was found after searching the following locations: D:\myjava\ide\ecilpse\jre\bin\javaw.exe 
javaw.exe in your current path

- 이러한 상환을 해결하기 위해서는 eclipse.ini 홑따옴표를 삭제합니다. 그럼 파일을 에디터로 열어서 '-vm' 옵션을 내용에 추가합니다. javaw.exe 파일 경로는 이전에 설치한 OpenJDK의 경로 하위에 bin 디렉터리에 있습니다.
> -vm
> C:\myjava\java\jdk-15.0.1\bin\javaw.exe

추가로 전체 설정 파일 내용입니다.
> .....
> openFile
> --launcher.appendVmargs
> -vm
> C:\myjava\java\jdk-15.0.1\bin\javaw.exe
> -vmargs
> Dosgi.requiredJavaVersion=1.8
> .....

위의 코드가 추가되었다면 저장 후 이클립스 실행 파일을 다시 실행합니다. 
그럼 다음과 같이 이클립스의 로고가 보이면 정상 실행 중입니다.

- Workspace 디렉터리 생성하여 작업 공간 설정 후 [Launch] 버튼 클릭

### Encoding 처리
- window > preferences > General > Workspace 에서 'UTF-8' 선택 후 [Apply and Close] 클릭

### Project 생성하기
- 'Create a Maven project' 선택
- Create a simple project(skip archetype selection) 체크 후 [Next]
> Maven은 Apache Maven이라고 하며 프로젝트를 관리, 빌드하는 도구입니다. 애플리케이션 개발에 있어서 빌드는 애플리케이션을 완성하기 위한 마지막 단계입니다. 
> 여기서 Maven은 빌드 기능도 제공해주지만, 여기서는 라이브러리 버전 관리 정도의 기능만을 사용합니다. 
> 지금까지 대부분 Open Source 라이브러리들을 해당 사이트에서 일일이 찾아서 다운로드한 후 직접 관리해 왔지만, Maven 기능을 이용한다면 라이브러리들을 받아오고 
> 버전 관리까지 Maven Repository를 통해서 간편하게 할 수 있습니다.

- Group Id: package 명명규칙에 따라 작성 ex) org.apache.maven, org.apache.commons
- Artifact Id: 버전 정보를 생략한 jar 파일을 이름으로, 특수문자를 사용하지 않으며 소문자로만 작성 ex) maven, commons-math
- Version: 전형적인 숫자와 점 ex) 1.0, 1.1, 1.0.1 ....
- Packaging: 패키징 종류 ex) jar, war, pom
- [Finish] 클릭

> Group Id: com.javastudy
> Artifact Id: firstApp
> Version: 0.0.1 -SNAPSHOT
> Packaging: jar
> [Finish]

- 'Project Explorer' 대신 'Navigator View' 활용
- 'Window > Show View > Other' 에서 'General > Navigator(Deprecated)' 선택

- Maven 프로젝트 구조
> /src/main/java : 자바 파일
>          /resources : 자바 파일을 제외한 나머지 파일들(예: properties, xml 등)
> pom.xml : Maven 빌드 설정 파일

- Project Explorer View 에서 J2SE-1.5 라고 보임. JDK13으로 선택하려면,
- pom.xml 파일 열기, 수정

[pom.xml 소스 시작]
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.javastudy</groupId>
  <artifactId>firstApp</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <properties>
    <java.version>13</java.version>
  </properties>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
[pom.xml 소스 끝]

### Lombok
- Maven Repository 사이트 <https://mvnrepository.com> 로 이동 
- lombok 검색
- Project Lombok 선택
- 1.18.12 선택
- Maven 텝에 있는 소스 클릭, 자동 copied to clipboard!
- pom.xml 파일에 properties와 build 사이에 내용 추가
[pom.xml 소스 시작]
....
<properties>
.....
</properties>
<dependencies>
  <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.12</version>
      <scope>provided</scope>
  </dependency>
</dependencies>
<build>
.........
</build>
......
[pom.xml 소스 끝]

- Project Explorer View에서 Maven Dependencies 하단에 추가된 lombok 라이브러리가 받아져서 다운로드 된 것을 확인
- 이클립스에서 Lombok의 기능을 사용할 수 있도록 다음 작업을 진행
- Project Explorer에서 Maven Dependencies 아래에 있는 Lombok 파일의 경로로 DOS창 경로로 이동
- java bin 폴더에 lombok-1.18.12.jar 파일을 복사
- DOS cmd에서 java bin 파일 경로로 이동
- java -jar lombok-1.18.12.jar 실행
- Project Lombok 인스톨러가 실행되면 [Specify location..] 버튼 클릭
- 우리가 사용하는 이클립스 실행 파일의 위치를 알려줌
- [Install/Update] 클릭
- 인스톨이 완료되면 인스톨러 종료 Lombok 설정 완료

### Hello, Java!!
- Navigator 에서 src > main > java로 이동
- folder 생성 'chap01'
- chap01 폴더에서 Ctl+N or chap01에서 context menu에서 Other...에서 Class 선택 Next
- Name에 파일명 입력 'Sample01'
- public static void main(String[] args) 체크
- main 함수 내에 system.out.print("Hello World!"); 입력 
- Alt + Shift + x 클릭 후 J 클릭

### Decompiler
- 디컴파일(Decompile)은 기계어로 컴파일된 파일을 다시 사람이 읽을 수 있는 소스코드로 변경하는 작업을 디컴파일이라고 함.
- 이클립스의 'Help > Eclipse Marketplace..' 메뉴 선택
- find 검색창에 decompile 검색
- 'Enhanced Class Decompiler' [Install] 클릭
- Install anyway 선택 후
- restart eclipse
- 'firstApp > target > classes > chap01 > Sample02.class' 이동 
- 찾은 파일에서 마우스 우 클릭(context menu)에서 Open With 선택 후 Other.. 선택
- Class Decompiler Viewer 선택, Use it for all '*.class' files 체크 후 OK, 지속적으로 연결처리 됨
- 소스코드가 원래의 코드와 똑같이 보임.





